/* MDNS-SD Query and advertise Example

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/
#include <Arduino.h>
#include "WiFi.h"
#include "ESPmDNS.h"
#include <esp_http_server.h>

#define GPIO_LED 2
#define GPIO_BUTTON 0

#define WIFI_SSID "OPTERNA-7D26"
#define WIFI_PASSWORD "12345678"

#define MDNS_SERVICE_NAME "UniversalRemoteTest"

bool level = 0;
esp_err_t http_get_handler(httpd_req_t* req)
{
	const char* resp = level ? "ON" : "OFF";

	httpd_resp_send(req, resp, strlen(resp));

	digitalWrite(GPIO_LED, level);

	ESP_LOGI(TAG, " %d Got a get request : %s", level, req->uri);

	return ESP_OK;
}

esp_err_t http_post_handler(httpd_req_t *req)
{
    /* Destination buffer for content of HTTP POST request.
     * httpd_req_recv() accepts char* only, but content could
     * as well be any binary data (needs type casting).
     * In case of string data, null termination will be absent, and
     * content length would give length of string */
    char content[100];

    /* Truncate if content length larger than the buffer */
    size_t recv_size = req->content_len;
    if(recv_size < sizeof(content)) recv_size = sizeof(content);

    int ret = httpd_req_recv(req, content, recv_size);

    if (ret <= 0) {  /* 0 return value indicates connection closed */
        /* Check if timeout occurred */
        if (ret == HTTPD_SOCK_ERR_TIMEOUT) {
            /* In case of timeout one can choose to retry calling
             * httpd_req_recv(), but to keep it simple, here we
             * respond with an HTTP 408 (Request Timeout) error */
            httpd_resp_send_408(req);
        }
        /* In case of error, returning ESP_FAIL will
         * ensure that the underlying socket is closed */
        return ESP_FAIL;
    }
    
    char resp[100];
    
    if(strcmp(content, "ON") == 0)
    {
        level = 1;
        strcpy(resp, "Turned LED ON");
    }
    else if(strcmp(content, "OFF") == 0)
    {
        level = 0;
        strcpy(resp, "Turned LED OFF");
    }
    else
    {
        strcpy(resp, "Invalid entry. send ON or OFF");
    }
    
    digitalWrite(GPIO_LED, level);

    ESP_LOGI(TAG, " Got a post request : %s", content);

    /* Send a simple response */
    httpd_resp_send(req, resp, strlen(resp));
    return ESP_OK;
}

httpd_handle_t start_webserver(void)
{
	httpd_uri_t uri_get;
    uri_get.handler = &http_get_handler;
    uri_get.method  = HTTP_GET;
    uri_get.uri = "/";
    uri_get.user_ctx = NULL;

	httpd_uri_t uri_post;
    uri_post.handler = &http_post_handler;
    uri_post.method  = HTTP_POST;
    uri_post.uri = "/";
    uri_post.user_ctx = NULL;

    /* Generate default configuration */
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();

    /* Empty handle to esp_http_server */
    httpd_handle_t server = NULL;

    /* Start the http server */
    if (httpd_start(&server, &config) == ESP_OK) {
        /* Register URI handlers */
        httpd_register_uri_handler(server, &uri_get);
        httpd_register_uri_handler(server, &uri_post);
    }
    /* If server failed to start, handle will be NULL */
    return server;
}

void stop_webserver(httpd_handle_t* server)
{
	httpd_stop(server);
}


httpd_handle_t server;

void setup(){
    pinMode(GPIO_LED, OUTPUT);
    pinMode(GPIO_BUTTON, INPUT);
    pinMode(14, OUTPUT);

    Serial.begin(115200);

    WiFi.mode(WIFI_STA);
    WiFi.disconnect();

    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

    while(WiFi.status() != WL_CONNECTED)
    {
        digitalWrite(GPIO_LED, HIGH);
        delay(100);
        digitalWrite(GPIO_LED, LOW);
        delay(100);
    }

    Serial.println("WiFi Setup done. Setting up server");
    
    server = start_webserver();

    Serial.println("Server setup, starting mDNS");

    digitalWrite(GPIO_LED, HIGH);

    Serial.println(MDNS.begin(MDNS_SERVICE_NAME));

    MDNS.addService("http", "tcp", 80);

    MDNS.addServiceTxt("http", "tcp", "test", "100");

    digitalWrite(GPIO_LED, LOW);

    Serial.println("Done");


}

void loop(){
    
}

